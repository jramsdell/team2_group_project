package predictors

import components.NearestNeighborComponent
import components.StochasticComponent
import components.TrainingVectorComponent
import containers.EmailSparseVector
import edu.unh.cs753.predictors.LabelPredictor
import edu.unh.cs753.utils.SearchUtils
import org.apache.lucene.search.IndexSearcher


class SimpleKernelPredictor(searcher: IndexSearcher) : LabelPredictor(searcher) {
    val trainingComponent = TrainingVectorComponent(searcher)
    val embedded = trainingComponent.vectors.map { e -> trainingComponent.embed(e, trainingComponent.basisCollection[0]) }
    val stochastic = StochasticComponent(nBasis = embedded.first().components.size,  trainingVectors = embedded, holdout = embedded)
//    val weights = listOf(5.495999301944405E-4, 5.495999301944405E-4, 6.309052260066987E-4, 0.013715431643475242, 0.0, 5.495999301944405E-4, -0.46550529163440535, -0.06431351669466709, 5.495999301944405E-4, -0.001945849126471384, 5.495999301944405E-4, 5.495999301944405E-4, 5.495999301944405E-4, 5.495999301944405E-4, 0.005090623585426806, -0.2613824687263715, 0.0, -0.06567187011519435, 0.124680676743608, 5.495999301944405E-4, 0.2139470319034211, -0.013811675899862812, 0.0, 5.400809095751077E-4, 5.495999301944405E-4, 5.495999301944405E-4, 5.495999301944405E-4, 0.016072364769184215, -0.0070407285857867555, -0.0050823526677769995, -5.259237479207999E-4, -0.0052181395703189, 0.03274981229687219, 0.0013735740537421254, -0.01011449273165907, -0.03888099737355298, -0.16430060974907393, 0.0016592206152073875, 0.005635757273011256, -0.011650207840683609, 0.014028736680539299, 0.07893571627656504, 0.0, 5.495999301944405E-4, -0.003446519460968964, 0.06358386282661757, 0.03777279367630666, 5.495999301944405E-4, 5.495999301944405E-4, -0.03677942708800564, -0.054641400074525955, 0.0, 0.05185194287960765, -0.10266260998100253, 0.06103873190831382, 5.495999301944405E-4, -0.16801626235959496, 5.495999301944405E-4, -0.03801436186094702, 5.495999301944405E-4, 5.495999301944405E-4, 5.495999301944405E-4, 5.495999301944405E-4, -0.10184905917850914, 5.495999301944405E-4, 0.0012967948509599201, -0.007609249861104915, -0.0380211366828658, 5.495999301944405E-4, 5.495999301944405E-4, -0.017820372022570016, 5.495999301944405E-4, 0.001074616843990085, 5.495999301944405E-4, 5.495999301944405E-4, 5.495999301944405E-4, 5.495999301944405E-4, 0.06733500407272691, 5.495999301944405E-4, 0.0, -0.02314733485433096, 0.03973651895564819, -5.495999301944405E-4, 5.495999301944405E-4, -0.08306179355084965, -0.0035237491537843673, 0.0016708363334011851, 0.1330603037977872, 0.023068099525471453, 5.495999301944405E-4, -0.07322054164023557, 0.005636181129036896, 0.0020342428721481106, -5.028260952245584E-4, -0.01096338204547257, -0.0030307739282335938, -0.005811889482242008, -0.002826769124529955, 0.05313148425258093, 5.495999301944405E-4, 0.0, -0.1830980110195547, 0.0, 5.495999301944405E-4, 5.495999301944405E-4, -0.02663482476162334, 5.495999301944405E-4, 0.003255112151912114, -0.3316381891181896, 0.27512593694179854, 5.495999301944405E-4, 5.495999301944405E-4, 0.00978272379226056, 0.08075353490595863, -9.124056883953667E-4, 0.009518741092383794, 0.10244880019384567, -0.0383164961706923, -0.05952203716271475, -0.05478916793473415, -0.030430362670152925, 0.0, -0.12109557035262923, 0.07728410660647358, 0.0015464975962213104, -0.03653510037365757, 5.495999301944405E-4, 0.0030384613722762416, -0.0024343701399655217, 0.00934412880544534, -0.0014249085344258917, 0.0013758197784488997, 5.495999301944405E-4, -0.038216930599392754, 5.495999301944405E-4, -0.0020058243006559474, -0.01164660476795014, 5.495999301944405E-4, 5.495999301944405E-4, 5.495999301944405E-4, -0.060943024341156, 5.495999301944405E-4, 9.319558051603186E-4, -0.17980422308441996, 0.0, 0.037448417629602715, -0.015520830411049161, -0.2185950095224292, 5.495999301944405E-4, 5.495999301944405E-4, -0.01687518766088438, -0.2604681819251795, 5.495999301944405E-4, 5.495999301944405E-4, 0.0026565755087980224, 0.0, 0.0016782194933149604, -0.05074302927256664, 0.00852873125695348, 0.00998420665739643, -0.009890128980897594, -0.004476693943820456, 5.495999301944405E-4, 9.487446838963334E-4, -0.04727005044405488, 0.025247186585373924, 5.495999301944405E-4, 0.15566204104776213, -0.037483851195702515, 5.495999301944405E-4, 0.0, 0.0, -0.05879450995873961, 5.495999301944405E-4, 5.495999301944405E-4, -0.04556186512252401, 5.495999301944405E-4, 3.8174701702171915E-4, 0.02552489080812437, 5.495999301944405E-4, 5.495999301944405E-4, 5.495999301944405E-4, -0.019878621415324496, -0.013943254567301375, 0.002922319846115507, 0.056827812632162605, 0.022412436629097386, 0.06977401366187522, 0.035238505769639515, 0.028322010527916518, 0.07965900684363257, 0.0, 0.018616259726488664, -0.029896336051962298, 5.495999301944405E-4, 5.495999301944405E-4, 0.018480589002546136, -0.010080881768667246, 0.0020238266405032696, 0.0, 0.028139990362402383, -0.037268845807319435, 0.02692862086477609, -0.024477977067088073, 0.019132186799546303, 8.87136406628858E-5, -0.10936709617383308, 0.05314297642789743, -0.01973264321095137, 0.008546945421280263)
//    val weights = listOf(-0.0057486543299584865, -0.08710113094282433, -9.518710135521823E-5, 0.012239088765035988, 0.007172283699102111, 8.235043709725235E-5, -0.08639694524771284, 0.023647385607775056, 8.235043709725235E-5, -0.002021612106070513, -0.02365108024016088, 8.235043709725235E-5, 8.235043709725235E-5, 8.235043709725235E-5, -0.020167852164485238, 8.235043709725235E-5, 4.738550866667937E-5, -0.05021450423090425, 0.0071000448251069236, 8.235043709725235E-5, 0.13931180940606833, -0.0040000044048528124, 8.235043709725235E-5, 0.0, 0.0022874530287002068, 8.235043709725235E-5, 0.0011804951015779383, 0.0, -0.00235155196043954, 8.235043709725235E-5, 0.0, -0.001423287796448231, 0.0017228204895941104, 0.0031248859982118972, 0.001757092525976719, -0.008341872193376924, 0.0, 0.0, 0.0031780691991967983, 8.235043709725235E-5, 5.156370439564009E-4, 0.005029286532048091, -0.0030262165791044996, 8.235043709725235E-5, 9.509000426157616E-5, 0.02060024690156994, -0.005212619098000719, 8.235043709725235E-5, 0.20733663705195257, -0.00682984142935371, 8.235043709725235E-5, 0.0, 0.06355299739613936, -0.03086592515362116, 8.235043709725235E-5, 0.07119760777383297, -0.012761556396704217, 8.235043709725235E-5, -0.005485297946127104, 0.04572279256864263, 0.04634065895643374, 8.235043709725235E-5, 8.235043709725235E-5, -0.030957111376004477, 8.235043709725235E-5, 0.0, -0.016989391713987532, -0.026502959250744078, 8.235043709725235E-5, 8.235043709725235E-5, 0.004945733335052275, 8.235043709725235E-5, -1.8232182521951614E-4, 8.235043709725235E-5, 8.235043709725235E-5, 8.235043709725235E-5, 8.235043709725235E-5, 0.011493881614308638, 0.05571235956520801, 0.0, -0.003506033161075058, 0.006809818419668275, -8.235043709725235E-5, 0.017469880118544376, -0.034452698616257396, 0.012473348155805813, -3.4852584691665706E-4, 0.03402525016405112, 0.020464738441613825, 0.0020605861971725865, -0.001263911619736316, 0.0025299222978133118, 5.85884317014294E-4, -4.7417152898639276E-5, 3.619723363387083E-4, 3.2008998429974486E-4, -8.235043709725235E-5, -0.0022405101099121773, -0.007717469643217196, -0.6254428004990963, -3.1732285554594576E-4, -0.02379007895865717, 0.009481908762478007, 8.235043709725235E-5, 8.235043709725235E-5, -0.015286998337326614, 0.025740837734574324, 0.0014007561243718737, -0.13167711605287644, 0.058958165279487815, 0.00904436867008431, 8.235043709725235E-5, -0.02019288136627009, 1.5526574882864934E-4, -6.173630381112405E-4, -0.012412493740311014, 0.0, 0.025192569759196867, -0.10512539229214786, 0.007370437208160841, 0.00904930039811779, 4.4279718429962177E-4, -0.0724445046834532, -8.235043709725235E-5, 0.003783671701432137, -0.0449017532686649, 8.235043709725235E-5, 8.235043709725235E-5, -6.622557333433166E-4, 0.0025547568939397916, 9.037702528826742E-4, 0.0026027361256431153, 0.002489006593865455, -0.015149263679927995, 8.235043709725235E-5, 1.1739622331230428E-4, -0.01369020132934982, 0.003370240431936128, 8.235043709725235E-5, -0.12754878164246602, -0.01266544198727024, 8.235043709725235E-5, 2.6375563200030263E-4, -0.061016863388083875, 0.009980288059652837, 8.235043709725235E-5, 8.235043709725235E-5, 8.235043709725235E-5, -0.6257120265121918, 8.235043709725235E-5, 8.235043709725235E-5, 8.235043709725235E-5, 8.235043709725235E-5, 8.235043709725235E-5, -0.00873745906638529, -0.0062732375810582025, 5.143369434630597E-4, -0.02573556821092379, 0.012934871334828789, 5.687909193532893E-4, -0.011507525613884477, -0.021031037113123867, 0.0056400096014128836, 1.666476615004296E-4, -0.01779960692397729, 0.05805680517693277, 8.235043709725235E-5, 0.006777530037276133, 0.014078092710362672, 0.17573729834492238, 0.001278006468594408, 0.02025509675084049, 0.006183404614768687, 8.235043709725235E-5, 8.235043709725235E-5, -0.0072235053287240565, 8.235043709725235E-5, -4.237066911744703E-5, 0.032914553218183804, -0.0022970725481271637, 8.235043709725235E-5, 8.235043709725235E-5, -0.013675418490170432, 0.0053634010464116205, 1.3171754716461857E-4, 0.004299642569238939, 0.03410632872634631, 0.02524889457281995, 0.040753421109615065, 0.025661048501460126, -0.03599173481191149, 0.0, 0.021615309447143346, -0.010353317734002306, -0.009873692243654083, 8.235043709725235E-5, 8.235043709725235E-5, -0.0011335671213300298, 0.0012409687244712881, 0.005818529917939192, 0.029392839329554846, -0.008245630868052665, 0.028498981466808522, 0.007338767145390694, 0.003453087443051436, 0.0, -0.03356224479834377, 0.04027864159934978, 0.005891349108159844, 0.00873335224636122)
    val weights = listOf(-0.02721204371550404, -0.03781258757492228, 0.10239169603444673, 0.016091631331343698, -0.06444525174582899, -0.07773076019308929, 0.0, -0.043763243573262604, 0.0, -0.22891836336559016, 0.05966848227173798, 0.0, -0.06758458318236864, 0.0053212191069331284, 0.1878804435659837, 0.09875886185871513, 0.0, 0.04681992548478128, 0.0, -0.1490854502248965, 0.06759813198635502, -0.06890341098618002, 0.061821574307077236, 0.0, 0.18441826219896199, -0.0791588134915079, 0.07583785592673818, 0.06333044004627689, 0.07628963712969591, 0.0, 0.15581787766586683, -0.2907489838380649, 0.0, 0.14635065633400485, 0.1533405340475674, -0.026070047724736038, -0.08651047228863488, 0.0, 0.21556700896864903, -0.04411314158371539, 0.21739363885963703, 0.03218458987846369, 0.0, -0.020479038897958123, 0.0, -0.10576425949377362, 0.0, -0.15951574401295127, 0.12368504040614743, 0.01932720577501344, 0.0, -0.04493326903219356, 0.0, 0.0, 0.019500972139697374, 0.0, -0.050520350037937735, 0.35141097022681383, 0.22933949663997724, 0.03316324963022803, -0.019674719089207846, -0.2040382081548524, -0.08874347409112487, 0.012085664094014747, 0.3072401374347469, 0.1438870004861085, 0.0, 0.16452062697821346, -0.07954511795963949, 0.09503876578515745, -0.09289440457821606, -0.14581501020011772, 0.09529130325742813, 0.019946115746634553, 0.15633516220033888, -0.009783601884126317, -0.07377766519406176, 0.0620679824968646, -0.04121392821484373, 0.0)
    var labeler = stochastic.myLabeler(weights)

    init {
        stochastic.memoizedHamDist = stochastic.createNormalDist(weights, stochastic.hamVectors)
        stochastic.memoizedSpamDist = stochastic.createNormalDist(weights, stochastic.spamVectors)
        println(stochastic.memoizedHamDist.mean)
        println(stochastic.memoizedSpamDist.mean)
        labeler = stochastic.myLabeler(weights)
    }
//    val stochastic = StochasticComponent(trainingComponent.basisVectors, trainingComponent.vectors)
//    val knn = NearestNeighborComponent(k = 3, trainingVectors = trainingComponent.vectors)
//    val centroid = CentroidComponent(5, trainingVectors = trainingComponent.vectors.toList())
//    val stochastic = StochasticComponent(trainingComponent.nBases, trainingComponent.vectors, trainingComponent.holdout)


    override fun predict(tokens: MutableList<String>?): String {
        val dist = tokens!!
            .flatMap { trainingComponent.createCharacterGrams(it, 4) }
//            .run { createBigrams(this) }
            .groupingBy { it }
            .eachCount()
            .map { it.key to it.value.toDouble() }
            .toMap()

        val dist2 = tokens!!
            .run { trainingComponent.createBigrams(this) }
            .groupingBy { it }
            .eachCount()
            .map { it.key to it.value.toDouble() }
            .toMap()

//        println(embedded.hashCode())

        val v = EmailSparseVector("", components = dist, bigrams = dist2)
        val embedding = trainingComponent.embed(v, trainingComponent.basisCollection[0])
        return labeler(embedding)



//        val weights = listOf(-2.0809679517532507, -2.090643168931246, 0.8838631908037125, -3.728043746748096, 1.269391347346216, 5.399407500057859, 1.0361073064170885, 2.2545661461069195, 0.5558237604761755, -2.8769468359852977)
//
//        val result = stochastic.myLabeler(weights, emptyList())(embedding)
//        return result

//        return knn.classify(embedding)
//        return "spam"
//        return centroid.classify(embedding)
    }
//    -2.0809679517532507, -2.090643168931246, 0.8838631908037125, -3.728043746748096, 1.269391347346216, 5.399407500057859, 1.0361073064170885, 2.2545661461069195, 0.5558237604761755, -2.8769468359852977


}

fun main(args: Array<String>) {
    val searcher = SearchUtils.createIndexSearcher("index")
    val predictor = SimpleKernelPredictor(searcher)
//    predictor.stochastic.doTrain()
    predictor.evaluate()


}